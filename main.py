import telebot
import time
from telebot import types
from Handler import AnswersHandler, HandlerForConfig


info_answers = AnswersHandler()   # –û–±'—î–∫—Ç –∫–ª–∞—Å—É –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –Ω–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è
info_config = HandlerForConfig()  # –û–±'—î–∫—Ç –∫–ª–∞—Å—É –∑ —Ç–æ–∫–µ–Ω–æ–º

bot = telebot.TeleBot(token=info_config.get_token())

ANSWER = ("–û–±–µ—Ä—ñ—Ç—å ‚å® —Ü—ñ–∫–∞–≤—É –≤–∞–º –≤–∫–ª–∞–¥–∫—É –≤ –º–µ–Ω—é –∞–±–æ –∑–≤`—è–∂—ñ—Ç—å—Å—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–º —Å–µ–∫—Ä–µ—Ç–∞—Ä–µ–º –ø—Ä–∏–π–º–∞–ª—å–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó –¢–§–ö –õ–ù–¢–£ üë®‚Äçüè´ - (091) 956-61-44 ‚òéÔ∏è",)
BACK_ANSWER = ('–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å? üòâ',)


# –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def bot_answer(message, answers, keyboard, next_options):
        user = bot.send_message(message.chat.id,
                                text='\n\n'.join(answers),
                                reply_markup=keyboard())
        bot.register_next_step_handler(user, next_options)


@bot.message_handler(commands=['start'])
def message_start(message):
    print(message)
    name = message.from_user.__dict__['first_name']
    user = bot.send_message(message.chat.id,
                            text=f'–ü—Ä–∏–≤—ñ—Ç üíô, {name}, –º–µ–Ω–µ –∑–≤—É—Ç—å –ì—ñ–¥-–±–æ—Ç ü§ñ, —è –±—É–¥—É —Ç–≤–æ—ó–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º –ø–æ–º—ñ—á–Ω–∏–∫–æ–º üïµ‚Äç‚ôÇ –∑ –ø–∏—Ç–∞–Ω—å –≤—Å—Ç—É–ø—É –≤ –∫–æ–ª–µ–¥–∂ üë®‚Äçüéì ',
                            reply_markup=keyboard_main())
    bot.register_next_step_handler(user,
                                   options_main)


# –ü–µ—Ä—à–µ –º–µ–Ω—é –≤–∏–±–æ—Ä—É
def options_main(message):
    match message.text:
        case '–ó–∞–≥–∞–ª—å–Ω–æ–æ—Å–≤—ñ—Ç–Ω—ñ–π –ø—Ä–æ—Ü–µ—Å':
            answer = ('–¶–µ–π —Ä–æ–∑–¥—ñ–ª –ø–µ—Ä–µ–±—É–≤–∞—î –Ω–∞ —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑—Ä–æ–±–∫–∏ ‚è≥',)
            bot_answer(message=message, answers=answer, keyboard=keyboard_main, next_options=options_main)
        case '–í—Å—Ç—É–ø –¢–§–ö':
            answer = ('–í–∏–±–µ—Ä—ñ—Ç—å üßê —Ä—ñ–≤–µ–Ω—å –æ—Å–≤—ñ—Ç–∏ üéì, –Ω–∞ —è–∫–∏–π –ø–ª–∞–Ω—É—î—Ç–µ –≤—Å—Ç—É–ø üè¢',)
            bot_answer(message=message, answers=answer, keyboard=keyboard_for_admission,
                       next_options=options_admission)
        case _:
            bot_answer(message=message, answers=ANSWER, keyboard=keyboard_main,
                       next_options=options_main)


# –ú–µ–Ω—é –≤–∏–±–æ—Ä—É –º—ñ–∂ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º —Ä–æ–±—ñ—Ç–Ω–∏–∫–æ–º —ñ –±–∞–∫–∞–ª–∞–≤—Ä–æ–º
def options_admission(message):
    match message.text:
        case '–§–∞—Ö–æ–≤–∏–π –º–æ–ª–æ–¥—à–∏–π –±–∞–∫–∞–ª–∞–≤—Ä':
            answer = ('–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å? üòâ',)
            bot_answer(message=message, answers=answer,
                       keyboard=keyboard_for_associate_bachelor, next_options=options_associate_bachelor)
        case '–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —Ä–æ–±—ñ—Ç–Ω–∏–∫':
            answer = ('–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å? üòâ',)
            bot_answer(message=message, answers=answer,
                       keyboard=keyboard_for_qualified_worker, next_options=options_qualified_worker)
        case '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥':
            bot_answer(message=message, answers=BACK_ANSWER,
                       keyboard=keyboard_main, next_options=options_main)
        case _:
            bot_answer(message=message, answers=ANSWER, keyboard=keyboard_for_admission,
                       next_options=options_admission)


# –ú–µ–Ω—é–≤ –∏–±–æ—Ä—É –¥–ª—è –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ —Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
def options_qualified_worker(message):
    keyboard = keyboard_for_qualified_worker
    next_options = options_qualified_worker
    match message.text:
        case '–ü—Ä–æ—Ñ–µ—Å—ñ—ó':
            bot_answer(message=message, answers=info_answers.column_value['professions'],
                       keyboard=keyboard, next_options=next_options)
        case '–î–æ–∫—É–º–µ–Ω—Ç–∏':
            bot_answer(message=message, answers=info_answers.column_value['documents_worker'],
                       keyboard=keyboard, next_options=next_options)
        case '–ù–∞–±—ñ—Ä. –†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è':
            bot_answer(message=message, answers=info_answers.column_value['enrollment_worker'],
                       keyboard=keyboard, next_options=next_options)
        case '–í—Å—Ç—É–ø–Ω—ñ –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω–Ω—è':
            bot_answer(message=message, answers=info_answers.column_value['entrance_examinations_worker'],
                       keyboard=keyboard, next_options=next_options)
        case '–ï—Ç–∞–ø–∏ –≤—Å—Ç—É–ø—É':
            bot_answer(message=message, answers=info_answers.column_value['stages_of_admission_worker'],
                       keyboard=keyboard, next_options=next_options)
        case '–í–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è':
            bot_answer(message=message, answers=info_answers.column_value['price_worker'],
                       keyboard=keyboard, next_options=next_options)
        case '–ì—É—Ä—Ç–æ–∂–∏—Ç–æ–∫':
            bot_answer(message=message, answers=info_answers.column_value['dormitory_worker'],
                       keyboard=keyboard, next_options=next_options)
        case '–ü—ñ–ª—å–≥–∏ –Ω–∞ –≤—Å—Ç—É–ø':
            bot_answer(message=message, answers=info_answers.column_value['admission_privilege_worker'],
                       keyboard=keyboard, next_options=next_options)
        case '–í—Å—Ç—É–ø –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç':
            bot_answer(message=message, answers=info_answers.column_value['contract-based_admission_worker'],
                       keyboard=keyboard, next_options=next_options)
        case '–ö–æ–Ω—Ç–∞–∫—Ç–∏':
            bot_answer(message=message, answers=info_answers.column_value['contacts_worker'],
                       keyboard=keyboard, next_options=next_options)
        case '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥':
            bot_answer(message=message, answers=BACK_ANSWER,
                       keyboard=keyboard_for_admission, next_options=options_admission)
        case _:
            bot_answer(message=message, answers=ANSWER, keyboard=keyboard,
                       next_options=next_options)


# –ú–µ–Ω—é –≤–∏–±–æ—Ä—É –¥–ª—è –±–∞–∫–∞–ª–∞–≤—Ä–∞
def options_associate_bachelor(message):
    keyboard = keyboard_for_associate_bachelor
    next_options = options_associate_bachelor
    match message.text:
        case '–ü–µ—Ä–µ–ª—ñ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç–µ–π':
            bot_answer(message=message, answers=info_answers.column_value['list_of_specialties'],
                       keyboard=keyboard, next_options=next_options)
        case '–î–æ–∫—É–º–µ–Ω—Ç–∏ —Ç–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –∫–∞–±—ñ–Ω–µ—Ç –≤—Å—Ç—É–ø–Ω–∏–∫–∞':
            bot_answer(message=message, answers=info_answers.column_value['documents'],
                       keyboard=keyboard, next_options=next_options)
        case '–ù–∞–±—ñ—Ä. –î–µ—Ä–∂–∞–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è':
            bot_answer(message=message, answers=info_answers.column_value['state_order'],
                       keyboard=keyboard, next_options=next_options)
        case '–í—Å—Ç—É–ø–Ω—ñ –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω–Ω—è':
            bot_answer(message=message, answers=info_answers.column_value['entrance_tests'],
                       keyboard=keyboard, next_options=next_options)
        case '–ï—Ç–∞–ø–∏ –≤—Å—Ç—É–ø—É':
            bot_answer(message=message, answers=info_answers.column_value['stages_of_admission'],
                       keyboard=keyboard, next_options=next_options)
        case '–í–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è':
            bot_answer(message=message, answers=info_answers.column_value['price'],
                       keyboard=keyboard, next_options=next_options)
        case '–ì—É—Ä—Ç–æ–∂–∏—Ç–æ–∫':
            bot_answer(message=message, answers=info_answers.column_value['dormitory'],
                       keyboard=keyboard, next_options=next_options)
        case '–ü—ñ–ª—å–≥–∏ –Ω–∞ –≤—Å—Ç—É–ø':
            bot_answer(message=message, answers=info_answers.column_value['admission_privilege'],
                       keyboard=keyboard, next_options=next_options)
        case '–í—Å—Ç—É–ø –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç':
            bot_answer(message=message, answers=info_answers.column_value['contract-based_admission'],
                       keyboard=keyboard, next_options=next_options)
        case '–ö–æ–Ω—Ç–∞–∫—Ç–∏':
            bot_answer(message=message, answers=info_answers.column_value['contacts'],
                       keyboard=keyboard, next_options=next_options)
        case '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥':
            bot_answer(message=message, answers=BACK_ANSWER,
                       keyboard=keyboard_for_admission, next_options=options_admission)
        case _:
            bot_answer(message=message, answers=ANSWER, keyboard=keyboard,
                       next_options=next_options)


def keyboard_for_associate_bachelor():
    buttons = types.ReplyKeyboardMarkup(resize_keyboard=True)

    button1 = types.KeyboardButton(text='–ü–µ—Ä–µ–ª—ñ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç–µ–π')
    button2 = types.KeyboardButton(text='–î–æ–∫—É–º–µ–Ω—Ç–∏ —Ç–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –∫–∞–±—ñ–Ω–µ—Ç –≤—Å—Ç—É–ø–Ω–∏–∫–∞')
    button3 = types.KeyboardButton(text='–ù–∞–±—ñ—Ä. –î–µ—Ä–∂–∞–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
    button4 = types.KeyboardButton(text='–í—Å—Ç—É–ø–Ω—ñ –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω–Ω—è')
    button5 = types.KeyboardButton(text='–ï—Ç–∞–ø–∏ –≤—Å—Ç—É–ø—É')
    button6 = types.KeyboardButton(text='–í–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è')
    button7 = types.KeyboardButton(text='–ì—É—Ä—Ç–æ–∂–∏—Ç–æ–∫')
    button8 = types.KeyboardButton(text='–ü—ñ–ª—å–≥–∏ –Ω–∞ –≤—Å—Ç—É–ø')
    button9 = types.KeyboardButton(text='–í—Å—Ç—É–ø –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç')
    button10 = types.KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç–∏')
    button11 = types.KeyboardButton(text='–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥')

    buttons.add(button1, button2, button3, button4, button5,
                button6, button7, button8, button9, button10,
                button11, row_width=1)
    return buttons


def keyboard_for_qualified_worker():
    buttons = types.ReplyKeyboardMarkup(resize_keyboard=True)

    button1 = types.KeyboardButton(text='–ü—Ä–æ—Ñ–µ—Å—ñ—ó')
    button2 = types.KeyboardButton(text='–î–æ–∫—É–º–µ–Ω—Ç–∏')
    button3 = types.KeyboardButton(text='–ù–∞–±—ñ—Ä. –†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
    button4 = types.KeyboardButton(text='–í—Å—Ç—É–ø–Ω—ñ –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω–Ω—è')
    button5 = types.KeyboardButton(text='–ï—Ç–∞–ø–∏ –≤—Å—Ç—É–ø—É')
    button6 = types.KeyboardButton(text='–í–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è')
    button7 = types.KeyboardButton(text='–ì—É—Ä—Ç–æ–∂–∏—Ç–æ–∫')
    button8 = types.KeyboardButton(text='–ü—ñ–ª—å–≥–∏ –Ω–∞ –≤—Å—Ç—É–ø')
    button9 = types.KeyboardButton(text='–í—Å—Ç—É–ø –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç')
    button10 = types.KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç–∏')
    button11 = types.KeyboardButton(text='–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥')

    buttons.add(button1, button2, button3, button4, button5,
                button6, button7, button8, button9, button10,
                button11, row_width=1)
    return buttons


def keyboard_for_admission():
    buttons = types.ReplyKeyboardMarkup(resize_keyboard=True)

    button1 = types.KeyboardButton(text='–§–∞—Ö–æ–≤–∏–π –º–æ–ª–æ–¥—à–∏–π –±–∞–∫–∞–ª–∞–≤—Ä')
    button2 = types.KeyboardButton(text='–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —Ä–æ–±—ñ—Ç–Ω–∏–∫')
    button3 = types.KeyboardButton(text='–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥')

    buttons.add(button1, button2, button3, row_width=1)
    return buttons


def keyboard_main():
    buttons = types.ReplyKeyboardMarkup(resize_keyboard=True)

    button1 = types.KeyboardButton(text='–ó–∞–≥–∞–ª—å–Ω–æ–æ—Å–≤—ñ—Ç–Ω—ñ–π –ø—Ä–æ—Ü–µ—Å')
    button2 = types.KeyboardButton(text='–í—Å—Ç—É–ø –¢–§–ö')

    buttons.add(button1, button2)
    return buttons


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)

        except Exception as e:
            print(e)
            time.sleep(15)
